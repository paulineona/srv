const express = require('express');
const multer = require('multer');
require('../db/mongoose');

const router = express.Router();

let fileName = '';

const fileFilter = (req, file, cb) => {
    if (file.mimetype === 'text/csv' || file.mimetype === 'text/plain') {
        cb(null, true);
    } else {
        console.log('File is not supported for processing!');
        cb(new Error('File is not supported for processing!'), false);
    }
}

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, './uploads/');
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + file.originalname);
    }
});

const upload = multer({ storage: multer.memoryStorage(), fileFilter: fileFilter });

router.post('/upload', upload.single('upload'), (req, res) => {

    if (req.file === undefined || req.file.size === 0) {
        console.log('No request to be read from the input file!');
        return res.status(400).send({ error: 'No request to be read from the input file!' });
    }

    try {
        let data;
        console.log('File name:', req.file.originalname);
        const fileContents = req.file.buffer.toString('utf8');
        console.log('File contents:\n', fileContents);

        if (req.file.mimetype === 'text/csv') {
            console.log('CSV file uploaded!\n');
            // data = await readCsv(fileContents);
        } else if (req.file.mimetype === 'text/plain') {
            console.log('TXT file uploaded!');
            // data = await readTxt(fileContents);
        } else {
            console.log('File is not supported for processing!');
            return res.status(400).send({ error: 'File is not supported for processing!' });
        }

        res.status(200).send({ message: 'File uploaded successfully!', fileContents: fileContents });
    } catch (error) {
        console.log('File is not supported for processing!');
        return res.status(400).send({ error: 'File is not supported for processing!' });
    }

}, (error, req, res, next) => {
    res.status(400).send({ error: error.message });
});


module.exports = router;

// --------------------------------------------------------------------------------------------

const express = require('express');
const multer = require('multer');
require('../db/mongoose');

const router = express.Router();

let fileName = '';

const fileFilter = (req, file, cb) => {
    if (file.mimetype === 'text/csv' || file.mimetype === 'text/plain') {
        cb(null, true);
    } else {
        console.log('File is not supported for processing!');
        cb(new Error('File is not supported for processing!'), false);
    }
}


const upload = multer({ storage: multer.memoryStorage(), fileFilter: fileFilter });

router.post('/upload', upload.single('upload'), async (req, res) => {

    if (req.file === undefined || req.file.size === 0) {
        console.log('No request to be read from the input file!');
        return res.status(400).send({ error: 'No request to be read from the input file!' });
    }

    try {
        let data;
        console.log('File name:', req.file.originalname);
        const fileContents = req.file.buffer.toString('utf8');
        console.log('File contents:\n', fileContents);

        if (req.file.mimetype === 'text/csv') {
            console.log('CSV file uploaded!\n');
            data = await readCsv(fileContents);
        } else if (req.file.mimetype === 'text/plain') {
            console.log('TXT file uploaded!');
            data = await readTxt(fileContents);
        } else {
            console.log('File is not supported for processing!');
            return res.status(400).send({ error: 'File is not supported for processing!' });
        }

        res.status(200).send({ message: 'File uploaded successfully!', fileContents: fileContents });
    } catch (error) {
        console.log('File is not supported for processing!');
        return res.status(400).send({ error: 'File is not supported for processing!' });
    }

}, (error, req, res, next) => {
    res.status(400).send({ error: error.message });
});


module.exports = router;
